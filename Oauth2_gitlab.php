<?php

    namespace thebuggenie\modules\oauth2_gitlab;

    use Omines\OAuth2\Client\Provider\GitlabResourceOwner;
    use thebuggenie\core\entities\Module;
    use thebuggenie\core\entities\tables\Users;
    use thebuggenie\core\entities\User;
    use thebuggenie\core\framework;

    /**
     * Autogenerated module Oauth2-GitLab
     *
     * @author
     * @version 0.1
     * @license http://opensource.org/licenses/MPL-2.0 Mozilla Public License 2.0 (MPL 2.0)
     * @package oauth2-gitlab
     * @subpackage core
     */

    /**
     * Autogenerated module Oauth2-gitlab
     *
     * @package oauth2-gitlab
     * @subpackage core
     *
     * @Table(name="\thebuggenie\core\entities\tables\Modules")
     */
    class Oauth2_gitlab extends Module
    {

        const VERSION = '1.0';

        protected $_has_config_settings = true;
        protected $_name = 'oauth2_gitlab';
        protected $_longname = 'GitLab OAuth2 support';
        protected $_description = 'Adds GitLab as an OAuth2 provider for user authentication and registration.';
        protected $_module_config_title = 'GitLab OAuth2 settings';
        protected $_module_config_description = 'Set up the Oauth2-gitlab module from this section';

        /**
         * Return an instance of this module
         *
         * @return Oauth2_gitlab
         */
        public static function getModule()
        {
            return framework\Context::getModule('oauth2_gitlab');
        }

        protected function _initialize()
        {
            require THEBUGGENIE_MODULES_PATH . 'oauth2_gitlab' . DS . 'vendor' . DS . 'autoload.php';
        }

        protected function _addListeners()
        {
            framework\Event::listen('core', 'login_form_pane', array($this, 'listenLoginButtons'));
        }

        protected function _install($scope)
        {
        }

        protected function _loadFixtures($scope)
        {
        }

        protected function _uninstall()
        {
        }

        public function getSettings()
        {
            return [
                'domain' => $this->getSetting('domain'),
                'client_id' => $this->getSetting('client_id'),
                'client_secret' => $this->getSetting('client_secret'),
                // 'btn_label' => $this->getSetting('btn_label'),
            ];
        }

        public function listenLoginButtons(framework\Event $event)
        {
            include_component('oauth2_gitlab/loginbutton');
        }

        public function getOrCreateUserByOwnerDetails(GitlabResourceOwner $ownerDetails)
        {
            $email = $ownerDetails->getEmail();
            $user = Users::getTable()->getByEmail($email);

            if (!$user instanceof User) {
                $user = new User();
                $user->setPassword(User::createPassword());
                $user->setUsername($email);
                $user->setRealname($ownerDetails->getName());
                $user->setEmail($email);
                $user->setOpenIdLocked();
                $user->setActivated();
                $user->setEnabled();
                $user->setValidated();
                $user->save();
            }

            return $user;
        }

        public function getFontAwesomeIcon()
        {
            return 'gitlab';
        }

        public function getFontAwesomeColor()
        {
            return '#555';
        }

    }
